break
}
}
return(c)
}
count_pack()
c=0
a=c()
count_pack = function()
{
vector1 = c("Harry","Dumbledore","Hermoine", "Ron", "Neville", "Mcgonagall", "Dobby")
prob1=c(0.25,0.20,0.20,0.15,0.10,0.05,0.05)
repeat
{
a=append(a,sample(vector1,size=1,prob=prob1))
c=c+1
if(length(unique(a)) >=7)
{
break
}
}
return(c)
}
count_pack()
c=0
a=c()
count_pack = function()
{
vector1 = c("Harry","Dumbledore","Hermoine", "Ron", "Neville", "Mcgonagall", "Dobby")
prob1=c(0.25,0.20,0.20,0.15,0.10,0.05,0.05)
repeat
{
a=append(a,sample(vector1,size=1,prob=prob1))
c=c+1
if(length(unique(a)) > 7)
{
break
}
}
return(c)
c=0
a=c()
count_pack = function()
{
vector1 = c("Harry","Dumbledore","Hermoine", "Ron", "Neville", "Mcgonagall", "Dobby")
prob1=c(0.25,0.20,0.20,0.15,0.10,0.05,0.05)
repeat
{
a=append(a,sample(vector1,size=1,prob=prob1))
c=c+1
if(length(unique(a)) > 7)
{
break
}
}
return(c)
}
count_pack()
count_pack = function()
{
vector1 = c("Harry","Dumbledore","Hermoine", "Ron", "Neville", "Mcgonagall", "Dobby")
prob1=c(0.25,0.20,0.20,0.15,0.10,0.05,0.05)
repeat
{
a=append(a,sample(vector1,size=1,prob=prob1))
c=c+1
if(length(unique(a)) >= 7)
{
break
}
}
return(c)
}
count_pack()
c=0
a = c()
count_packets = function()
{
vector1 = c("Harry","Dumbledore","Hermoine", "Ron", "Neville", "Mcgonagall", "Dobby")
prob1=c(0.25,0.20,0.20,0.15,0.10,0.05,0.05)
while(length(unique(a))<7)
{
a=append(a,sample(vector1,size=1,prob=prob1))
c=c+1
}
return(c)
}
count_packets()
c=0
a = c()
count_packets = function()
{
vector1 = c("Harry","Dumbledore","Hermoine", "Ron", "Neville", "Mcgonagall", "Dobby")
prob1=c(0.25,0.20,0.20,0.15,0.10,0.05,0.05)
while(length(unique(a))<=7)
{
a=append(a,sample(vector1,size=1,prob=prob1))
c=c+1
}
return(c)
}
count_packets()
## Problem 2
euler <- function(n)
{
nlim <- (1 + 1/n)^(n)
return(nlim)
}
# checking comparisons with e
euler(10000) - exp(1)
## Problem 3
seat <- read.csv("https://dvats.github.io/assets/course/mth208/seating.csv")
[seat$Roll == 221332, ]
vector1[0]
vector1 = c("Harry","Dumbledore","Hermoine", "Ron", "Neville", "Mcgonagall", "Dobby")
vector1[0]
vector1[1]
library(tidyverse)
library(rvest)
html = read_html("https://www.icc-cricket.com/rankings/womens/player-rankings/odi/batting")
r1 = html %>% html_elements(".rankings-table__pos-number") %>% html_text()
r2=gsub("\n","",ranking)
ranking=as.numeric(gsub(" ","",r1))
name = html %>% html_elements(".table-body__cell.rankings-table__name.name a") %>% html_text()
team = html %>% html_elements(".table-body__logo-text") %>% html_text()
ratings = as.numeric(html %>% html_elements(".table-body__cell.rating") %>% html_text())
icc_rank = data.frame("Ranking" = ranking , "Name of Player" = name , "Team" = team , "Rating" = ratings)
icc_rank
alyssa= html %>% html_elements(".rankings-block__banner--name-large") %>% html_text()
count = html %>% html_elements(".rankings-block__banner--nationality") %>% html_text()
aus = gsub(" ","",gsub("\n","",count))
r11 = html %>% html_elements(".rankings-block__pos-number") %>% html_text()
r12 = as.numeric(gsub(" ","",gsub("\n","",r11)))
rank11 = as.numeric(html %>% html_elements(".rankings-block__banner--rating") %>% html_text())
d1 = data.frame("Ranking" = r12 , "Name of Player" = alyssa , "Team" = aus , "Rating" = rank11)
icc_rank = merge(icc_rank,d1)
icc_rank = rbind(c(r12,alyssa,aus,rank11),icc_rank)
icc_rank
library(tidyverse)
library(rvest)
html = read_html("https://www.icc-cricket.com/rankings/womens/player-rankings/odi/batting")
r1 = html %>% html_elements(".rankings-table__pos-number") %>% html_text()
r2=gsub("\n","",ranking)
ranking=as.numeric(gsub(" ","",r1))
name = html %>% html_elements(".table-body__cell.rankings-table__name.name a") %>% html_text()
team = html %>% html_elements(".table-body__logo-text") %>% html_text()
ratings = as.numeric(html %>% html_elements(".table-body__cell.rating") %>% html_text())
icc_rank = data.frame("Ranking" = ranking , "Name of Player" = name , "Team" = team , "Rating" = ratings)
alyssa= html %>% html_elements(".rankings-block__banner--name-large") %>% html_text()
count = html %>% html_elements(".rankings-block__banner--nationality") %>% html_text()
aus = gsub(" ","",gsub("\n","",count))
r11 = html %>% html_elements(".rankings-block__pos-number") %>% html_text()
r12 = as.numeric(gsub(" ","",gsub("\n","",r11)))
rank11 = as.numeric(html %>% html_elements(".rankings-block__banner--rating") %>% html_text())
d1 = data.frame("Ranking" = r12 , "Name of Player" = alyssa , "Team" = aus , "Rating" = rank11)
icc_rank = merge(icc_rank,d1)
icc_rank = rbind(c(r12,alyssa,aus,rank11),icc_rank)
icc_rank
r2=gsub("\n","",ranking)
ranking=as.numeric(gsub(" ","",r1))
name = html %>% html_elements(".table-body__cell.rankings-table__name.name a") %>% html_text()
team = html %>% html_elements(".table-body__logo-text") %>% html_text()
ratings = as.numeric(html %>% html_elements(".table-body__cell.rating") %>% html_text())
icc_rank = data.frame("Ranking" = ranking , "Name of Player" = name , "Team" = team , "Rating" = ratings)
icc_rank
alyssa= html %>% html_elements(".rankings-block__banner--name-large") %>% html_text()
count = html %>% html_elements(".rankings-block__banner--nationality") %>% html_text()
aus = gsub(" ","",gsub("\n","",count))
r11 = html %>% html_elements(".rankings-block__pos-number") %>% html_text()
r12 = as.numeric(gsub(" ","",gsub("\n","",r11)))
rank11 = as.numeric(html %>% html_elements(".rankings-block__banner--rating") %>% html_text())
d1 = data.frame("Ranking" = r12 , "Name of Player" = alyssa , "Team" = aus , "Rating" = rank11)
icc_rank = merge(icc_rank,d1)
icc_rank = rbind(c(r12,alyssa,aus,rank11),icc_rank)
icc_rank
library(rvest)
library(tidyverse)
html = read_html("https://prsindia.org/covid-19/cases")
table = html %>% html_table()
table
table[,-1]
dt1 = data.frame(table)
dt1
dt1[,-1]
dt1
dt1[,-1]
dt1[,1]
table = html %>% html_table()
table
dt1 = data.frame(table)
dt2=dt[,-1]
dt3=dt2[-1,]
dt2=dt1[,-1]
dt3=dt2[-1,]
dt3
dt1 = data.frame(table)
dt1
dim(dt3)
#3
html = read_html("https://stats.stackexchange.com/questions?tab=Votes")
ques = html %>% html_elements(".s-link") %>% html_text()
ques
ques = ques[-1]
ques = ques[-16]
ques
## Problem 3
seat <- read.csv("https://dvats.github.io/assets/course/mth208/seating.csv")
# suppose by roll no. is 221332
seat[seat$Roll == 221332, ]
# suppose by roll no. is 221332
seat[seat$i..Roll == 221332, ]
# suppose by roll no. is 221332
seat[seat$Roll == 221332, ]
seat[which(seat$ï..Roll == 221428)]
seat[which(seat$Roll == 221428)]
seat <- read.csv("https://dvats.github.io/assets/course/mth208/seating.csv")
index=which(seat$ï..Roll == 221428)
paste("My assigned seat is",seat$Seat[index])
## Problem 1
seat <- read.csv("https://dvats.github.io/assets/course/mth208/seating.csv")
# MSc students have id 22xxxx, so all MSc students
# have roll number > 220000
msc <- seat[seat$Roll > 220000, ]  #  data of only msc students
length(msc$Roll)
# MSc students have id 22xxxx, so all MSc students
# have roll number > 220000
msc <- seat[seat$i..Roll > 220000, ]  #  data of only msc students
length(msc$Roll)
## Problem 2
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
## Problem 2(a)
allround_index <- (cricket$Batting > 25 & cricket$Bowling < 40)
allround <- cricket[allround_index, ]
allround
# presents the frequencies of all teams
table(allround$Team)
## Problem 4
# Making a function for (1 + 1/n)^n
fx <- function(n)
{
rtn <- (1 + 1/n)^n
return(rtn)
}
# defining a vector of n = 1, ..., 1000
n <- 1:1e3
# calculating fn for each n
# function is easily vectorizable
fn <- fx(n)
# making a plot
plot(n, fn, type = "l")
abline(h = exp(1), col = "red")
html <- read_html("https://www.imdb.com/chart/top/")
code = html %>% html_elements(".ratingColumn .seen-widget") %>% html_attr("data-titleid")
year = html %>% html_elements(".secondaryInfo") %>% html_text()
year = as.numeric(substring(year,2,5))
name = html %>% html_elements(" .titleColumn a") %>% html_text()
url = paste("https://www.imdb.com","title",code[1],"ratings", sep = "/")
html = read_html(url)
all_ratings = html %>% html_table()
rating =as.numeric(gsub(",","",all_ratings[[1]]$Votes[1]))
men_rating = as.numeric(substring(all_ratings[[2]][2,2],1,3))
women_rating = as.numeric(substring(all_ratings[[2]][3,2],1,3))
men_votes = as.numeric(gsub(",","",substring(gsub("\n","",gsub(" ","",all_ratings[[2]][2,2])),4,)))
#2
images = c()
for(i in 1:250)
{
img_urls[i] = paste("https://www.imdb.com","title",code[i],"ratings", sep = "/")
html = read_html(img_urls[i])
images[i] <- html %>% html_element(".ipc-image") %>% html_attr("src")
}
#2
images = c()
img_urls = c()
for(i in 1:250)
{
img_urls[i] = paste("https://www.imdb.com","title",code[i],"ratings", sep = "/")
html = read_html(img_urls[i])
images[i] <- html %>% html_element(".ipc-image") %>% html_attr("src")
}
#2
images = c()
img_urls = c()
for(i in 1:250)
{
print(paste("Starting movie",i))
img_urls[i] = paste("https://www.imdb.com","title",code[i],"ratings", sep = "/")
html = read_html(img_urls[i])
images[i] <- html %>% html_element(".ipc-image") %>% html_attr("src")
}
#3
diff.col <- function(img, col)
{
col.mat <- as.array(img[, , 1, ])
dims <- dim(col.mat)
# Calculate distance to given color
dist <- matrix(0, nrow = dims[1], ncol = dims[2])
for(i in 1:dims[1])
{
for(j in 1:dims[2])
{
# distance from the col give by user
dist[i,j] <- norm(col.mat[i,j, ] - col, "2")
}
}
# return the mean distance from color
return(mean(dist))
}
## Now calculating distance average distance black
library(imager)
black <- numeric(length = nmov)
for(i in 1:nmov)
{
img <- load.image(images[i])
black[i] <- diff.col(img, col = c(0,0,0))
}
black <- c()
for(i in 1:250)
{
img <- load.image(images[i])
black[i] <- diff.col(img, col = c(0,0,0))
}
images
# describe how many movies to scrape
# first make it work for a few, and then
# set nmov = 250
nmov <- 100
## Finding the codes of all the movies
html <- read_html("https://www.imdb.com/chart/top/")
codes <-  html %>%
html_elements(".seen-widget") %>%
html_attr("data-titleid")
codes <- codes[1:nmov]
# name, year, rating, and votes is available
# in the top 250 page
name <- html %>%
html_elements(".titleColumn a") %>%
html_text()
name <- name[1:nmov]
year <- html %>%
html_elements(".secondaryInfo") %>%
html_text() %>%
substring(2,5) %>%  # removing brackets
as.numeric()  # changing to number
year <- name[1:nmov]
# getting rating
rating <-  html %>%
html_elements(".ratingColumn.imdbRating") %>%
html_elements("strong") %>%
html_text() %>%
as.numeric()  # convering to numeric
rating <- rating[1:nmov]
over.votes <- html %>%
html_elements(".ratingColumn strong") %>%
html_attr("title") %>%
substring(14) # removing the first 13 characters
over.votes <- substring(over.votes, 1, nchar(over.votes) - 13)
over.votes <- gsub(',', "", over.votes)%>%
as.numeric()
over.votes <- over.votes[1:nmov]
# URL of the images
urls_img <- paste("https://www.imdb.com/title/", codes, sep = "")
images <- character(length = nmov) # will store the vector of image locations
for(i in 1:nmov)
{
print(paste("Starting movie", i))
movie_html <- read_html(urls_img[i])
images[i] <- movie_html %>% html_element(".ipc-image") %>% html_attr("src")
}
code
#2
images = c()
img_urls = paste("https://www.imdb.com","title",code,"ratings", sep = "/")
img_urls[i]
for(i in 1:250)
{
print(paste("Starting movie",i))
html = read_html(img_urls[i])
images[i] <- html %>% html_element(".ipc-image") %>% html_attr("src")
}
images[i]
#3
diff.col <- function(img, col)
{
col.mat <- as.array(img[, , 1, ])
dims <- dim(col.mat)
# Calculate distance to given color
dist <- matrix(0, nrow = dims[1], ncol = dims[2])
for(i in 1:dims[1])
{
for(j in 1:dims[2])
{
# distance from the col give by user
dist[i,j] <- norm(col.mat[i,j, ] - col, "2")
}
}
# return the mean distance from color
return(mean(dist))
}
## Now calculating distance average distance black
library(imager)
black <- c()
for(i in 1:250)
{
img <- load.image(images[i])
black[i] <- diff.col(img, col = c(0,0,0))
}
images[1]
images[2]
html = read_html(img_urls[i])
images[i] <- html %>% html_element(".ipc-image") %>% html_attr("src")
html = read_html(img_urls[1])
images <- html %>% html_element(".ipc-image") %>% html_attr("src")
images
img_urls[1]
img_urls = paste("https://www.imdb.com","title",code, sep = "/")
html = read_html(img_urls[1])
images <- html %>% html_element(".ipc-image") %>% html_attr("src")
images
#2
images = c()
img_urls = paste("https://www.imdb.com","title",code, sep = "/")
for(i in 1:250)
{
print(paste("Starting movie",i))
html = read_html(img_urls[i])
images[i] <- html %>% html_element(".ipc-image") %>% html_attr("src")
}
images
#3
diff.col <- function(img, col)
{
col.mat <- as.array(img[, , 1, ])
dims <- dim(col.mat)
# Calculate distance to given color
dist <- matrix(0, nrow = dims[1], ncol = dims[2])
for(i in 1:dims[1])
{
for(j in 1:dims[2])
{
# distance from the col give by user
dist[i,j] <- norm(col.mat[i,j, ] - col, "2")
}
}
# return the mean distance from color
return(mean(dist))
}
## Now calculating distance average distance black
library(imager)
black <- c()
for(i in 1:8)
{
img <- load.image(images[i])
black[i] <- diff.col(img, col = c(0,0,0))
}
images[2]
black <- c()
for(i in 1:8)
{
img <- load.image(images[i])
black[i] <- diff.col(img, col = c(0,0,0))
}
black
setwd("~/GitHub/group-project-8")
library(ggplot2)
library(reshape2)
load("Guj_data.Rdata")
setwd("C:/Users/Admin/Documents/Programming/group-project-8/Drunk_and_drive")
library(ggplot2)
library(reshape2)
load("Guj_data.Rdata")
X <- melt(Guj_data[,2:4], variable.name = "Type", value.name = "Incidents")
X <- data.frame(X, "Year" = Guj_data$Year)
p <- ggplot(X, aes(x = Year, y = Incidents, color = Type) )
p <- p + geom_line() + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
library(ggplot2)
library(reshape2)
load("Guj_data.Rdata")
X <- melt(Guj_data[,2:4], variable.name = "Type", value.name = "Incidents")
X <- data.frame(X, "Year" = Guj_data$Year)
p <- ggplot(X, aes(x = Year, y = Incidents, color = Type) )
p <- p + geom_smooth(method = "lm") + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
library(ggplot2)
library(reshape2)
load("Guj_data.Rdata")
X <- melt(Guj_data[,2:4], variable.name = "Type", value.name = "Incidents")
X <- data.frame(X, "Year" = Guj_data$Year)
p <- ggplot(X, aes(x = Year, y = Incidents, color = Type) )
p <- p + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs")) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
p <- p + geom_point() + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs")) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
p <- p + geom_point() + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs"), alpha = 0.7) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
p <- p + geom_point() + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs"), alpha = 0.1) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
p <- p + geom_point() + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs"), alpha = 1) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
p <- p + geom_point() + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs"), alpha = .1) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
library(ggplot2)
library(reshape2)
load("Guj_data.Rdata")
X <- melt(Guj_data[,2:4], variable.name = "Type", value.name = "Incidents")
X <- data.frame(X, "Year" = Guj_data$Year)
p <- ggplot(X, aes(x = Year, y = Incidents, color = Type) )
p <- p + geom_point() + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs"), alpha = .1) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
p <- p + geom_point() + geom_smooth(method = "gam",  formula = y ~ s(x, bs = "cs"), alpha = .2) + geom_vline(xintercept = 2009, col = "brown", lwd = 1)
p + geom_text(aes(x = 2009, y = 20000 , label = "\n ALCOHOL BANNED") , color = "brown", angle = 90, lwd = 4)
